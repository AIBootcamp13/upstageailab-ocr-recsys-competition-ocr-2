name: Documentation Validation

on:
  push:
    branches:
      - '*'
    paths:
      - 'docs/**'
      - '.github/workflows/docs-validation.yml'
  pull_request:
    branches:
      - '*'
    paths:
      - 'docs/**'
  schedule:
    # Run daily at 9 AM UTC to check for stale documentation
    - cron: '0 9 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      # Step 4: Validate documentation links
      - name: Validate links
        id: link_validation
        run: |
          echo "🔗 Validating documentation links..."
          python scripts/validate_links.py docs/

      # Step 5: Check documentation freshness
      - name: Check freshness
        id: freshness_check
        run: |
          echo "📅 Checking documentation freshness..."
          # Use 30 days for scheduled runs, 90 days for PR/push to avoid noise
          if [ "${{ github.event_name }}" = "schedule" ]; then
            python scripts/check_freshness.py docs/ 30
          else
            python scripts/check_freshness.py docs/ 90
          fi

      # Step 6: Generate validation report
      - name: Generate report
        run: |
          echo "📊 Generating validation report..."
          echo "## Documentation Validation Report" > docs-validation-report.md
          echo "" >> docs-validation-report.md
          echo "**Timestamp:** $(date)" >> docs-validation-report.md
          echo "**Event:** ${{ github.event_name }}" >> docs-validation-report.md
          echo "**Branch:** ${{ github.ref }}" >> docs-validation-report.md
          echo "" >> docs-validation-report.md

          # Add link validation results
          if [ "${{ steps.link_validation.outcome }}" = "success" ]; then
            echo "✅ **Link Validation:** Passed" >> docs-validation-report.md
          else
            echo "❌ **Link Validation:** Failed" >> docs-validation-report.md
          fi

          # Add freshness check results
          if [ "${{ steps.freshness_check.outcome }}" = "success" ]; then
            echo "✅ **Freshness Check:** Passed" >> docs-validation-report.md
          else
            echo "⚠️ **Freshness Check:** Issues found" >> docs-validation-report.md
          fi

          echo "" >> docs-validation-report.md
          echo "### Details" >> docs-validation-report.md
          echo "Run the validation scripts locally for detailed output." >> docs-validation-report.md

      # Step 7: Upload validation report
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-validation-report
          path: docs-validation-report.md

      # Step 8: Comment on PR with results
      - name: Comment on PR
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('docs-validation-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Documentation Validation Results\n\n${report}\n\n---\n\n**Note:** This automated check ensures documentation quality. Please review and fix any issues found.`
            });

      # Step 9: Create issue for stale documentation (scheduled runs only)
      - name: Create issue for stale docs
        if: github.event_name == 'schedule' && steps.freshness_check.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('docs-validation-report.md', 'utf8');

            // Check if an issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['documentation', 'stale'],
              state: 'open'
            });

            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '📅 Stale Documentation Detected',
                body: `## Stale Documentation Alert\n\n${report}\n\n### Action Required\nPlease review the stale documentation files and update them as needed.\n\n**Automated check:** This issue was created by the scheduled documentation validation workflow.`,
                labels: ['documentation', 'stale', 'automated']
              });
            }
