hydra:
  run:
    dir: outputs/${exp_name}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    root:
      level: ERROR
    disable_existing_loggers: true
  job_logging:
    version: 1
    root:
      level: ERROR
    disable_existing_loggers: true
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - exp_name=ocr_training_gpu
    - dataset_path=ocr.datasets.preparations.base
    - model.architecture.backbone.pretrained=False
    - trainer.max_epochs=1
    - trainer.accelerator=cpu
    - trainer.check_val_every_n_epoch=1
    - trainer.log_every_n_steps=1
    - train_dataloader.batch_size=2
    - val_dataloader.batch_size=2
    - train_dataloader.num_workers=2
    - val_dataloader.num_workers=2
    - dataset_base_path=data/datasets/
    - model.architecture.decoder.output_channels=256
  job:
    name: train
    chdir: null
    override_dirname: dataset_base_path=data/datasets/,dataset_path=ocr.datasets.preparations.base,exp_name=ocr_training_gpu,model.architecture.backbone.pretrained=False,model.architecture.decoder.output_channels=256,train_dataloader.batch_size=2,train_dataloader.num_workers=2,trainer.accelerator=cpu,trainer.check_val_every_n_epoch=1,trainer.log_every_n_steps=1,trainer.max_epochs=1,val_dataloader.batch_size=2,val_dataloader.num_workers=2
    id: '0'
    num: 0
    config_name: train
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.2'
    cwd: /home/vscode/workspace/upstageailab-ocr-recsys-competition-ocr-2
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/vscode/workspace/upstageailab-ocr-recsys-competition-ocr-2/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: /home/vscode/workspace/upstageailab-ocr-recsys-competition-ocr-2/multirun/2025-09-26/17-03-55/0
    choices:
      debug: default
      callbacks: default
      trainer: default
      logger: default
      paths: default
      model: default
      dataloaders: default
      data: default
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: disabled
      hydra/hydra_logging: disabled
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
