# @package _global_

dataset_base_path: "${hydra:runtime.cwd}/data/datasets/"

batch_size: 16

data:
  train_num_samples: null
  val_num_samples: null
  test_num_samples: null

datasets:
  train_dataset:
    _target_: ${dataset_path}.ValidatedOCRDataset
    config:
      _target_: ${dataset_config_path}.DatasetConfig
      image_path: ${dataset_base_path}images/train
      annotation_path: ${dataset_base_path}jsons/train.json
    transform: ${transforms.train_transform}
  val_dataset:
    _target_: ${dataset_path}.ValidatedOCRDataset
    config:
      _target_: ${dataset_config_path}.DatasetConfig
      # PERFORMANCE OPTIMIZATION: Canonical validation images path
      # Uses pre-processed images optimized for validation (consistent EXIF handling)
      # Required for reproducible benchmarks and cache consistency
      image_path: ${dataset_base_path}images_val_canonical
      annotation_path: ${dataset_base_path}jsons/val.json

      # PERFORMANCE FEATURE: RAM Image Preloading (~1.12x speedup)
      # Preloads ALL validation images into RAM at dataset initialization
      # Memory Cost: ~200MB for 404 validation images (avg 500KB each)
      # Benefits: Eliminates disk I/O during training epochs
      # Drawbacks: Increases startup time (~10-15s), higher memory usage
      # Safe to disable: Set to false for memory-constrained environments
      # When to disable: Low RAM systems, debugging disk I/O issues
      preload_images: true

      # PERFORMANCE FEATURE: Load Pre-computed Maps
      # Loads probability/threshold maps from disk cache instead of computing
      # Required for evaluation metrics, enables maps caching below
      # Memory Cost: Minimal (~50MB for maps)
      # Always enable for validation datasets
      load_maps: true

      # PERFORMANCE FEATURES: Multi-Level Caching Configuration
      # Controls three types of caching for maximum training performance
      cache_config:
        _target_: ${dataset_config_path}.CacheConfig

        # FEATURE: Tensor Caching (~2.5-3x speedup after cache warm-up)
        # Caches fully transformed tensors (post-augmentation, post-normalization)
        # Memory Cost: ~800MB-1.2GB for validation dataset
        # Benefits: Epochs 1+ run 6-8x faster (cache hit rate ~95%)
        # Drawbacks: Epoch 0 slower (builds cache), high memory usage
        # When to disable: Memory constrained, debugging transforms
        # ⚠️  WARNING: Only enable for validation datasets (not training!)
        # ⚠️  WARNING: Cache invalidates if transforms change between runs
        cache_transformed_tensors: true

        # FEATURE: Image Caching (enables preloading above)
        # Caches raw ImageData objects in RAM (post-loading, pre-transform)
        # Memory Cost: Included in preload_images cost above
        # Required for: preload_images functionality
        # Safe to keep enabled: Low overhead, high benefit
        cache_images: true

        # FEATURE: Maps Caching
        # Caches probability/threshold maps for evaluation
        # Memory Cost: ~50MB for validation maps
        # Benefits: Faster evaluation metrics computation
        # Note: Automatically disabled when load_maps=false
        # Safe to keep enabled: Minimal memory impact
        cache_maps: true

        # MONITORING: Cache Statistics Logging
        # Logs cache hit/miss statistics every N accesses
        # Helps monitor cache effectiveness and debug performance
        # Set to null to disable logging (reduces log verbosity)
        log_statistics_every_n: 100
    transform: ${transforms.val_transform}
  test_dataset:
    _target_: ${dataset_path}.ValidatedOCRDataset
    config:
      _target_: ${dataset_config_path}.DatasetConfig
      image_path: ${dataset_base_path}images/val
      annotation_path: ${dataset_base_path}jsons/val.json
    transform: ${transforms.test_transform}
  predict_dataset:
    _target_: ${dataset_path}.ValidatedOCRDataset
    config:
      _target_: ${dataset_config_path}.DatasetConfig
      image_path: ${dataset_base_path}images/test
      annotation_path: null
    transform: ${transforms.test_transform}

collate_fn:
  _target_: ${dataset_path}.DBCollateFN
  shrink_ratio: 0.4
  thresh_min: 0.3
  thresh_max: 0.7
